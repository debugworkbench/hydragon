// Copyright (c) 2015 Vadim Macagon
// MIT License, see LICENSE file for full terms.

declare namespace polymer {
  interface IBaseWithBehaviors<TLocalDOM, TBehaviors> extends Base<TLocalDOM> {
    /**
     * Accessor for any instance members contributed by behaviors.
     * Note that this accessor must be stripped out from the code generated by TypeScript because
     * it doesn't actually exist in Polymer elements.
     */
    behavior: TBehaviors;
  }

  interface IBaseClass<TLocalDOM, TBehaviors> {
    new (): IBaseWithBehaviors<TLocalDOM, TBehaviors>;
  }

  interface Global {
    /**
     * This function doesn't actually exist in Polymer, it's declared here to support definition
     * of custom Polymer elements using the syntax: `MyElement extends Polymer.BaseClass()`. Note
     * that because Polymer does it's own prototype chaining a Babel plugin is required to strip
     * out the `extends` from the code generated by TypeScript.
     */
    BaseClass<TLocalDOM, TBehaviors>(): IBaseClass<TLocalDOM, TBehaviors>;
    BaseClass<TLocalDOM>(): { new (): Base<TLocalDOM> };
  }
}
